package specter3d.engine.core.camera
{
	import laya.maths.Rectangle;
	import specter3d.engine.core.Object3D;
	import specter3d.engine.core.camera.lens.Lens3D;
	import specter3d.engine.core.camera.lens.PerspectiveLens;
	import specter3d.engine.core.geom.Matrix3D;
	import specter3d.engine.core.geom.Vector3D;
	import specter3d.engine.events.Event3D;
	import specter3d.engine.events.Lens3DEvent;
	import specter3d.engine.utlis.Matrix3DUtils;
	/**
	 * Camera3D
	 * @author wangcx
	 *
	 */
	public class Camera3D extends Object3D
	{

		public function Camera3D(lens:Lens3D=null)
		{
			this.lens=lens || new PerspectiveLens();
			this.transform.setPosition(0, 0, -1000);
			this.transform.on(Event3D.UPDATE_TRANSFORM, null, onUpdateTransform);
		}

		private var _lens:Lens3D; // 镜头
		private var _projDirty:Boolean=true; // projection dirty
		private var _viewProjDirty:Boolean=true; // view projection dirty
		private var _viewProjection:Matrix3D=new Matrix3D(); // view projection

		override public function clone():Object3D
		{
			var camera3d:Camera3D=new Camera3D(lens.clone());
			return camera3d;
		}

		/**
		 * 远裁面
		 * @return
		 *
		 */
		public function get far():Number
		{
			return this._lens.far;
		}

		/**
		 * 远裁面
		 * @return
		 *
		 */
		public function set far(value:Number):void
		{
			this._lens.far=value;
		}

		/**
		 * 获取方向，相机尺寸必须和scene尺寸一样。
		 * @param x			2d x坐标
		 * @param y			2d y坐标
		 * @param out		方向
		 * @return
		 *
		 */
		public function getPointDir(x:Number, y:Number, out:Vector3D=null):Vector3D
		{
			if (!out)
			{
				out=new Vector3D();
			}
			var rect:Rectangle=null; //Device3D.scene.viewPort;
			// 转换到3d投影之后的坐标
			x=x - rect.x;
			y=y - rect.y;
			out.x=((x / rect.width) - 0.5) * 2;
			out.y=((-y / rect.height) + 0.5) * 2;
			out.z=1;
			// 通过逆矩阵转换到投影之前的坐标
			Matrix3DUtils.transformVector(lens.invProjection, out, out);
			out.x=out.x * out.z;
			out.y=out.y * out.z;
			// 转换到view空间 PS:view就是invWorld
			Matrix3DUtils.deltaTransformVector(transform.world, out, out);
			out.normalize();
			return out;
		}

		public function get lens():Lens3D
		{
			return _lens;
		}

		public function set lens(value:Lens3D):void
		{
			if (this._lens)
			{
				this._lens.off(Lens3DEvent.PROJECTION_UPDATE, null, onLensProjChanged);
			}
			this._lens=value;
			this._lens.on(Lens3DEvent.PROJECTION_UPDATE, null, onLensProjChanged);
		}

		/**
		 * 近裁面
		 * @return
		 *
		 */
		public function get near():Number
		{
			return this._lens.near;
		}

		/**
		 * 近裁面
		 * @return
		 *
		 */
		public function set near(value:Number):void
		{
			this._lens.near=value;
		}

		/**
		 * 投影矩阵
		 * @return
		 *
		 */
		public function get projection():Matrix3D
		{
			return _lens.projection;
		}

		/**
		 * 设置视口
		 * @param x			x坐标
		 * @param y			y坐标
		 * @param width		宽度
		 * @param height	高度
		 *
		 */
		public function setViewPort(x:int, y:int, width:int, height:int):void
		{
			this._lens.setViewPort(x, y, width, height);
		}

		/**
		 * view
		 * @return
		 *
		 */
		public function get view():Matrix3D
		{
			return transform.invWorld;
		}

		/**
		 * 视口
		 * @param rect
		 *
		 */
		public function get viewPort():Rectangle
		{
			return this._lens.viewPort;
		}

		/**
		 * 视口
		 * @param rect
		 *
		 */
		public function set viewPort(rect:Rectangle):void
		{
			this._lens.setViewPort(rect.x, rect.y, rect.width, rect.height);
		}

		/**
		 * view projection
		 * @return
		 *
		 */
		public function get viewProjection():Matrix3D
		{
			if (this._projDirty || this._viewProjDirty)
			{
				this._projDirty=false;
				this._viewProjDirty=false;
				this._viewProjection.copyFrom(view);
				this._viewProjection.append(projection);
			}
			return this._viewProjection;
		}

		public function get zoom():Number
		{
			return _lens.zoom;
		}

		/**
		 * 镜头更新
		 * @param event
		 *
		 */
		private function onLensProjChanged():void
		{
			this._projDirty=true;
		}

		/**
		 * 相机位置更新，需要重新设置view projection
		 * @param event
		 *
		 */
		private function onUpdateTransform(event:Event3D):void
		{
			this._viewProjDirty=true;
		}
	}
}
